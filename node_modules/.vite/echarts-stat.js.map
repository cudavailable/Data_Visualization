{
  "version": 3,
  "sources": ["../echarts-stat/dist/ecStat.js", "../echarts-stat/index.js", "dep:echarts-stat"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"ecStat\"] = factory();\r\n\telse\r\n\t\troot[\"ecStat\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId])\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\texports: {},\r\n/******/ \t\t\tid: moduleId,\r\n/******/ \t\t\tloaded: false\r\n/******/ \t\t};\r\n\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.loaded = true;\r\n\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n\r\n\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    return {\r\n\r\n\t        clustering: __webpack_require__(1),\r\n\t        regression: __webpack_require__(5),\r\n\t        statistics: __webpack_require__(6),\r\n\t        histogram: __webpack_require__(15),\r\n\r\n\t        transform: {\r\n\t            regression: __webpack_require__(18),\r\n\t            histogram: __webpack_require__(21),\r\n\t            clustering: __webpack_require__(22)\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\t    var arrayUtil = __webpack_require__(3);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var arraySize = arrayUtil.size;\r\n\t    var sumOfColumn = arrayUtil.sumOfColumn;\r\n\t    var arraySum = arrayUtil.sum;\r\n\t    var zeros = arrayUtil.zeros;\r\n\t    // var isArray = arrayUtil.isArray;\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var isNumber = numberUtil.isNumber;\r\n\t    var mathPow = Math.pow;\r\n\r\n\t    var OutputType = {\r\n\t        /**\r\n\t         * Data are all in one. Cluster info are added as an attribute of data.\r\n\t         * ```ts\r\n\t         * type OutputDataSingle = {\r\n\t         *     // Each index of `data` is the index of the input data.\r\n\t         *     data: OutputDataItem[];\r\n\t         *     // The index of `centroids` is the cluster index.\r\n\t         *     centroids: [ValueOnX, ValueOnY][];\r\n\t         * };\r\n\t         * type InputDataItem = (ValueOnX | ValueOnY | OtherValue)[];\r\n\t         * type OutputDataItem = (...InputDataItem | ClusterIndex | SquareDistanceToCentroid)[];\r\n\t         * ```\r\n\t         */\r\n\t        SINGLE: 'single',\r\n\t        /**\r\n\t         * Data are separated by cluster. Suitable for retrieving data form each cluster.\r\n\t         * ```ts\r\n\t         * type OutputDataMultiple = {\r\n\t         *     // Each index of `clusterAssment` is the index of the input data.\r\n\t         *     clusterAssment: [ClusterIndex, SquareDistanceToCentroid][];\r\n\t         *     // The index of `centroids` is the cluster index.\r\n\t         *     centroids: [ValueOnX, ValueOnY][];\r\n\t         *     // The index of `pointsInCluster` is the cluster index.\r\n\t         *     pointsInCluster: DataItemListInOneCluster[];\r\n\t         * }\r\n\t         * type DataItemListInOneCluster = InputDataItem[];\r\n\t         * type InputDataItem = (ValueOnX | ValueOnY | OtherValue)[];\r\n\t         * type SquareDistanceToCentroid = number;\r\n\t         * type ClusterIndex = number;\r\n\t         * type ValueOnX = number;\r\n\t         * type ValueOnY = number;\r\n\t         * type OtherValue = unknown;\r\n\t         * ```\r\n\t         */\r\n\t        MULTIPLE: 'multiple'\r\n\t    }\r\n\r\n\t    /**\r\n\t     * KMeans of clustering algorithm.\r\n\t     * @param {Array.<Array.<number>>} data two-dimension array\r\n\t     * @param {number} k the number of clusters in a dataset\r\n\t     * @return {Object}\r\n\t     */\r\n\t    function kMeans(data, k, dataMeta) {\r\n\r\n\t        // create array to assign data points to centroids, also holds SE of each point\r\n\t        var clusterAssigned = zeros(data.length, 2);\r\n\t        var centroids = createRandCent(k, calcExtents(data, dataMeta.dimensions));\r\n\t        var clusterChanged = true;\r\n\t        var minDist;\r\n\t        var minIndex;\r\n\t        var distIJ;\r\n\t        var ptsInClust;\r\n\r\n\t        while (clusterChanged) {\r\n\t            clusterChanged = false;\r\n\t            for (var i = 0; i < data.length; i++) {\r\n\t                minDist = Infinity;\r\n\t                minIndex = -1;\r\n\t                for (var j = 0; j < k; j++) {\r\n\t                    distIJ = distEuclid(data[i], centroids[j], dataMeta);\r\n\t                    if (distIJ < minDist) {\r\n\t                        minDist = distIJ;\r\n\t                        minIndex = j;\r\n\t                    }\r\n\t                }\r\n\t                if (clusterAssigned[i][0] !== minIndex) {\r\n\t                    clusterChanged = true;\r\n\t                }\r\n\t                clusterAssigned[i][0] = minIndex;\r\n\t                clusterAssigned[i][1] = minDist;\r\n\t            }\r\n\t            //recalculate centroids\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                ptsInClust = [];\r\n\t                for (var j = 0; j < clusterAssigned.length; j++) {\r\n\t                    if (clusterAssigned[j][0] === i) {\r\n\t                        ptsInClust.push(data[j]);\r\n\t                    }\r\n\t                }\r\n\t                centroids[i] = meanInColumns(ptsInClust, dataMeta);\r\n\t            }\r\n\t        }\r\n\r\n\t        var clusterWithKmeans = {\r\n\t            centroids: centroids,\r\n\t            clusterAssigned: clusterAssigned\r\n\t        };\r\n\t        return clusterWithKmeans;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Calculate the average of each column in a two-dimensional array\r\n\t     * and returns the values as an array.\r\n\t     */\r\n\t    function meanInColumns(dataList, dataMeta) {\r\n\t        var meanArray = [];\r\n\t        var sum;\r\n\t        var mean;\r\n\t        for (var j = 0; j < dataMeta.dimensions.length; j++) {\r\n\t            var dimIdx = dataMeta.dimensions[j];\r\n\t            sum = 0;\r\n\t            for (var i = 0; i < dataList.length; i++) {\r\n\t                sum += dataList[i][dimIdx];\r\n\t            }\r\n\t            mean = sum / dataList.length;\r\n\t            meanArray.push(mean);\r\n\t        }\r\n\t        return meanArray;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * The combine of hierarchical clustering and k-means.\r\n\t     * @param {Array} data two-dimension array.\r\n\t     * @param {Object|number} [clusterCountOrConfig] config or clusterCountOrConfig.\r\n\t     * @param {number} clusterCountOrConfig.clusterCount Mandatory.\r\n\t     *        The number of clusters in a dataset. It has to be greater than 1.\r\n\t     * @param {boolean} [clusterCountOrConfig.stepByStep=false] Optional.\r\n\t     * @param {OutputType} [clusterCountOrConfig.outputType='multiple'] Optional.\r\n\t     *        See `OutputType`.\r\n\t     * @param {number} [clusterCountOrConfig.outputClusterIndexDimension] Mandatory.\r\n\t     *        Only work in `OutputType.SINGLE`.\r\n\t     * @param {number} [clusterCountOrConfig.outputCentroidDimensions] Optional.\r\n\t     *        If specified, the centroid will be set to those dimensions of the result data one by one.\r\n\t     *        By default not set centroid to result.\r\n\t     *        Only work in `OutputType.SINGLE`.\r\n\t     * @param {Array.<number>} [clusterCountOrConfig.dimensions] Optional.\r\n\t     *        Target dimensions to calculate the regression.\r\n\t     *        By default: use all of the data.\r\n\t     * @return {Array} See `OutputType`.\r\n\t     */\r\n\t    function hierarchicalKMeans(data, clusterCountOrConfig, stepByStep) {\r\n\t        var config = (\r\n\t            isNumber(clusterCountOrConfig)\r\n\t                ? {clusterCount: clusterCountOrConfig, stepByStep: stepByStep}\r\n\t                : clusterCountOrConfig\r\n\t        ) || {clusterCount: 2};\r\n\r\n\t        var k = config.clusterCount;\r\n\r\n\t        if (k < 2) {\r\n\t            return;\r\n\t        }\r\n\r\n\t        var dataMeta = parseDataMeta(data, config);\r\n\t        var isOutputTypeSingle = dataMeta.outputType === OutputType.SINGLE;\r\n\r\n\t        var dataSet = dataPreprocess(data, {dimensions: dataMeta.dimensions});\r\n\r\n\t        var clusterAssment = zeros(dataSet.length, 2);\r\n\t        var outputSingleData;\r\n\t        var setClusterIndex;\r\n\t        var getClusterIndex;\r\n\r\n\t        function setDistance(dataIndex, dist) {\r\n\t            clusterAssment[dataIndex][1] = dist;\r\n\t        }\r\n\t        function getDistance(dataIndex) {\r\n\t            return clusterAssment[dataIndex][1];\r\n\t        };\r\n\r\n\t        if (isOutputTypeSingle) {\r\n\t            outputSingleData = [];\r\n\t            var outputClusterIndexDimension = dataMeta.outputClusterIndexDimension;\r\n\r\n\t            setClusterIndex = function (dataIndex, clusterIndex) {\r\n\t                outputSingleData[dataIndex][outputClusterIndexDimension] = clusterIndex;\r\n\t            };\r\n\t            getClusterIndex = function (dataIndex) {\r\n\t                return outputSingleData[dataIndex][outputClusterIndexDimension];\r\n\t            };\r\n\r\n\t            for (var i = 0; i < dataSet.length; i++) {\r\n\t                outputSingleData.push(dataSet[i].slice());\r\n\t                setDistance(i, 0);\r\n\t                setClusterIndex(i, 0);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            setClusterIndex = function (dataIndex, clusterIndex) {\r\n\t                clusterAssment[dataIndex][0] = clusterIndex;\r\n\t            };\r\n\t            getClusterIndex = function (dataIndex) {\r\n\t                return clusterAssment[dataIndex][0];\r\n\t            };\r\n\t        }\r\n\r\n\t        // initial center point.\r\n\t        var centroid0 = meanInColumns(dataSet, dataMeta);\r\n\t        var centList = [centroid0];\r\n\t        for (var i = 0; i < dataSet.length; i++) {\r\n\t            var dist = distEuclid(dataSet[i], centroid0, dataMeta);\r\n\t            setDistance(i, dist);\r\n\t        }\r\n\r\n\t        var lowestSSE;\r\n\t        var ptsInClust;\r\n\t        var ptsNotClust;\r\n\t        var clusterInfo;\r\n\t        var sseSplit;\r\n\t        var sseNotSplit;\r\n\t        var index = 1;\r\n\t        var result = {\r\n\t            data: outputSingleData,\r\n\t            centroids: centList,\r\n\t            isEnd: false\r\n\t        };\r\n\t        if (!isOutputTypeSingle) {\r\n\t            // Only for backward compat.\r\n\t            result.clusterAssment = clusterAssment;\r\n\t        }\r\n\r\n\t        function oneStep() {\r\n\t            //the existing clusters are continuously divided\r\n\t            //until the number of clusters is k\r\n\t            if (index < k) {\r\n\t                lowestSSE = Infinity;\r\n\t                var centSplit;\r\n\t                var newCentroid;\r\n\t                var newClusterAss;\r\n\r\n\t                for (var j = 0; j < centList.length; j++) {\r\n\t                    ptsInClust = [];\r\n\t                    ptsNotClust = [];\r\n\t                    for (var i = 0; i < dataSet.length; i++) {\r\n\t                        if (getClusterIndex(i) === j) {\r\n\t                            ptsInClust.push(dataSet[i]);\r\n\t                        }\r\n\t                        else {\r\n\t                            ptsNotClust.push(getDistance(i));\r\n\t                        }\r\n\t                    }\r\n\t                    clusterInfo = kMeans(ptsInClust, 2, dataMeta);\r\n\t                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\r\n\t                    sseNotSplit = arraySum(ptsNotClust);\r\n\t                    if (sseSplit + sseNotSplit < lowestSSE) {\r\n\t                        lowestSSE = sseNotSplit + sseSplit;\r\n\t                        centSplit = j;\r\n\t                        newCentroid = clusterInfo.centroids;\r\n\t                        newClusterAss = clusterInfo.clusterAssigned;\r\n\t                    }\r\n\t                }\r\n\r\n\t                for (var i = 0; i < newClusterAss.length; i++) {\r\n\t                    if (newClusterAss[i][0] === 0) {\r\n\t                        newClusterAss[i][0] = centSplit;\r\n\t                    }\r\n\t                    else if (newClusterAss[i][0] === 1) {\r\n\t                        newClusterAss[i][0] = centList.length;\r\n\t                    }\r\n\t                }\r\n\r\n\t                centList[centSplit] = newCentroid[0];\r\n\t                centList.push(newCentroid[1]);\r\n\t                for (var i = 0, j = 0; i < dataSet.length && j < newClusterAss.length; i++) {\r\n\t                    if (getClusterIndex(i) === centSplit) {\r\n\t                        setClusterIndex(i, newClusterAss[j][0]);\r\n\t                        setDistance(i, newClusterAss[j++][1]);\r\n\t                    }\r\n\t                }\r\n\r\n\t                var pointInClust = [];\r\n\t                if (!isOutputTypeSingle) {\r\n\t                    for (var i = 0; i < centList.length; i++) {\r\n\t                        pointInClust[i] = [];\r\n\t                        for (var j = 0; j < dataSet.length; j++) {\r\n\t                            if (getClusterIndex(j) === i) {\r\n\t                                pointInClust[i].push(dataSet[j]);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                    result.pointsInCluster = pointInClust;\r\n\t                }\r\n\r\n\t                index++;\r\n\t            }\r\n\t            else {\r\n\t                result.isEnd = true;\r\n\t            }\r\n\t        }\r\n\r\n\t        if (!config.stepByStep) {\r\n\t            while (oneStep(), !result.isEnd);\r\n\t        }\r\n\t        else {\r\n\t            result.next = function () {\r\n\t                oneStep();\r\n\t                setCentroidToResultData(result, dataMeta);\r\n\t                return result;\r\n\t            };\r\n\t        }\r\n\t        setCentroidToResultData(result, dataMeta);\r\n\t        return result;\r\n\t    }\r\n\r\n\t    function setCentroidToResultData(result, dataMeta) {\r\n\t        var outputCentroidDimensions = dataMeta.outputCentroidDimensions;\r\n\t        if (dataMeta.outputType !== OutputType.SINGLE || outputCentroidDimensions == null) {\r\n\t            return;\r\n\t        }\r\n\t        var outputSingleData = result.data;\r\n\t        var centroids = result.centroids;\r\n\r\n\t        for (var i = 0; i < outputSingleData.length; i++) {\r\n\t            var line = outputSingleData[i];\r\n\t            var clusterIndex = line[dataMeta.outputClusterIndexDimension];\r\n\t            var centroid = centroids[clusterIndex];\r\n\t            var dimLen = Math.min(centroid.length, outputCentroidDimensions.length);\r\n\t            for (var j = 0; j < dimLen; j++) {\r\n\t                line[outputCentroidDimensions[j]] = centroid[j];\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Create random centroid of kmeans.\r\n\t     */\r\n\t    function createRandCent(k, extents) {\r\n\t        //constructs a two-dimensional array with all values 0\r\n\t        var centroids = zeros(k, extents.length);\r\n\t        //create random cluster centers, within bounds of each dimension\r\n\t        for (var j = 0; j < extents.length; j++) {\r\n\t            var extentItem = extents[j];\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                centroids[i][j] = extentItem.min + extentItem.span * Math.random();\r\n\t            }\r\n\t        }\r\n\t        return centroids;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Distance method for calculating similarity\r\n\t     */\r\n\t    function distEuclid(dataItem, centroid, dataMeta) {\r\n\t        // The distance should be normalized between different dimensions,\r\n\t        // otherwise they may provide different weight in the final distance.\r\n\t        // The greater weight offers more effect in the cluster determination.\r\n\r\n\t        var powerSum = 0;\r\n\t        var dimensions = dataMeta.dimensions;\r\n\t        var extents = dataMeta.rawExtents;\r\n\t        //subtract the corresponding elements in the vectors\r\n\t        for (var i = 0; i < dimensions.length; i++) {\r\n\t            var span = extents[i].span;\r\n\t            // If span is 0, do not count.\r\n\t            if (span) {\r\n\t                var dimIdx = dimensions[i];\r\n\t                var dist = (dataItem[dimIdx] - centroid[i]) / span;\r\n\t                powerSum += mathPow(dist, 2);\r\n\t            }\r\n\t        }\r\n\r\n\t        return powerSum;\r\n\t    }\r\n\r\n\t    function parseDataMeta(dataSet, config) {\r\n\t        var size = arraySize(dataSet);\r\n\t        if (size.length < 1) {\r\n\t            throw new Error('The input data of clustering should be two-dimension array.');\r\n\t        }\r\n\t        var colCount = size[1];\r\n\t        var defaultDimensions = [];\r\n\t        for (var i = 0; i < colCount; i++) {\r\n\t            defaultDimensions.push(i);\r\n\t        }\r\n\t        var dimensions = normalizeDimensions(config.dimensions, defaultDimensions);\r\n\t        var outputType = config.outputType || OutputType.MULTIPLE;\r\n\r\n\t        var outputClusterIndexDimension = config.outputClusterIndexDimension;\r\n\t        if (outputType === OutputType.SINGLE && !numberUtil.isNumber(outputClusterIndexDimension)) {\r\n\t            throw new Error('outputClusterIndexDimension is required as a number.');\r\n\t        }\r\n\t        var extents = calcExtents(dataSet, dimensions);\r\n\r\n\t        return {\r\n\t            dimensions: dimensions,\r\n\t            rawExtents: extents,\r\n\t            outputType: outputType,\r\n\t            outputClusterIndexDimension: outputClusterIndexDimension,\r\n\t            outputCentroidDimensions: config.outputCentroidDimensions,\r\n\t        };\r\n\t    }\r\n\r\n\t    function calcExtents(dataSet, dimensions) {\r\n\t        var extents = [];\r\n\t        var dimLen = dimensions.length;\r\n\t        for (var i = 0; i < dimLen; i++) {\r\n\t            extents.push({ min: Infinity, max: -Infinity });\r\n\t        }\r\n\t        for (var i = 0; i < dataSet.length; i++) {\r\n\t            var line = dataSet[i];\r\n\t            for (var j = 0; j < dimLen; j++) {\r\n\t                var extentItem = extents[j];\r\n\t                var val = line[dimensions[j]];\r\n\t                extentItem.min > val && (extentItem.min = val);\r\n\t                extentItem.max < val && (extentItem.max = val);\r\n\t            }\r\n\t        }\r\n\t        for (var i = 0; i < dimLen; i++) {\r\n\t            extents[i].span = extents[i].max - extents[i].min;\r\n\t        }\r\n\t        return extents;\r\n\t    }\r\n\r\n\t    return {\r\n\t        OutputType: OutputType,\r\n\t        hierarchicalKMeans: hierarchicalKMeans\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var array = __webpack_require__(3);\r\n\t    var isArray = array.isArray;\r\n\t    var size = array.size;\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * @param  {Array.<number>|number} dimensions like `[2, 4]` or `4`\r\n\t     * @param  {Array.<number>} [defaultDimensions=undefined] By default `undefined`.\r\n\t     * @return {Array.<number>} number like `4` is normalized to `[4]`,\r\n\t     *         `null`/`undefined` is normalized to `defaultDimensions`.\r\n\t     */\r\n\t    function normalizeDimensions(dimensions, defaultDimensions) {\r\n\t        return typeof dimensions === 'number'\r\n\t            ? [dimensions]\r\n\t            : dimensions == null\r\n\t            ? defaultDimensions\r\n\t            : dimensions;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Data preprocessing, filter the wrong data object.\r\n\t     *  for example [12,] --- missing y value\r\n\t     *              [,12] --- missing x value\r\n\t     *              [12, b] --- incorrect y value\r\n\t     *              ['a', 12] --- incorrect x value\r\n\t     * @param  {Array.<Array>} data\r\n\t     * @param  {Object?} [opt]\r\n\t     * @param  {Array.<number>} [opt.dimensions] Optional. Like [2, 4],\r\n\t     *         means that dimension index 2 and dimension index 4 need to be number.\r\n\t     *         If null/undefined (by default), all dimensions need to be number.\r\n\t     * @param  {boolean} [opt.toOneDimensionArray] Convert to one dimension array.\r\n\t     *         Each value is from `opt.dimensions[0]` or dimension 0.\r\n\t     * @return {Array.<Array.<number>>}\r\n\t     */\r\n\t    function dataPreprocess(data, opt) {\r\n\t        opt = opt || {};\r\n\t        var dimensions = opt.dimensions;\r\n\t        var numberDimensionMap = {};\r\n\t        if (dimensions != null) {\r\n\t            for (var i = 0; i < dimensions.length; i++) {\r\n\t                numberDimensionMap[dimensions[i]] = true;\r\n\t            }\r\n\t        }\r\n\t        var targetOneDim = opt.toOneDimensionArray\r\n\t            ? (dimensions ? dimensions[0] : 0)\r\n\t            : null;\r\n\r\n\t        function shouldBeNumberDimension(dimIdx) {\r\n\t            return !dimensions || numberDimensionMap.hasOwnProperty(dimIdx);\r\n\t        }\r\n\r\n\t        if (!isArray(data)) {\r\n\t            throw new Error('Invalid data type, you should input an array');\r\n\t        }\r\n\t        var predata = [];\r\n\t        var arraySize = size(data);\r\n\r\n\t        if (arraySize.length === 1) {\r\n\t            for (var i = 0; i < arraySize[0]; i++) {\r\n\t                var item = data[i];\r\n\t                if (isNumber(item)) {\r\n\t                    predata.push(item);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else if (arraySize.length === 2) {\r\n\t            for (var i = 0; i < arraySize[0]; i++) {\r\n\t                var isCorrect = true;\r\n\t                var item = data[i];\r\n\t                for (var j = 0; j < arraySize[1]; j++) {\r\n\t                    if (shouldBeNumberDimension(j) && !isNumber(item[j])) {\r\n\t                        isCorrect = false;\r\n\t                    }\r\n\t                }\r\n\t                if (isCorrect) {\r\n\t                    predata.push(\r\n\t                        targetOneDim != null\r\n\t                            ? item[targetOneDim]\r\n\t                            : item\r\n\t                    );\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return predata;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {string|number} val\r\n\t     * @return {number}\r\n\t     */\r\n\t    function getPrecision(val) {\r\n\t        var str = val.toString();\r\n\t        // scientific notation is not considered\r\n\t        var dotIndex = str.indexOf('.');\r\n\t        return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\r\n\t    }\r\n\r\n\t    return {\r\n\t        normalizeDimensions: normalizeDimensions,\r\n\t        dataPreprocess: dataPreprocess,\r\n\t        getPrecision: getPrecision\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var objToString = Object.prototype.toString;\r\n\t    var arrayProto = Array.prototype;\r\n\t    var nativeMap = arrayProto.map;\r\n\r\n\t    /**\r\n\t     * Get the size of a array\r\n\t     * @param  {Array} data\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function size(data) {\r\n\t        var s = [];\r\n\t        while (isArray(data)) {\r\n\t            s.push(data.length);\r\n\t            data = data[0];\r\n\t        }\r\n\t        return s;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {*}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isArray(value) {\r\n\t        return objToString.call(value) === '[object Array]';\r\n\t    }\r\n\r\n\t    /**\r\n\t     * constructs a (m x n) array with all values 0\r\n\t     * @param  {number} m  the row\r\n\t     * @param  {number} n  the column\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function zeros(m, n) {\r\n\t        var zeroArray = [];\r\n\t        for (var i = 0; i < m ; i++) {\r\n\t            zeroArray[i] = [];\r\n\t            for (var j = 0; j < n; j++) {\r\n\t                zeroArray[i][j] = 0;\r\n\t            }\r\n\t        }\r\n\t        return zeroArray;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Sums each element in the array.\r\n\t     * Internal use, for performance considerations, to avoid\r\n\t     * unnecessary judgments and calculations.\r\n\t     * @param  {Array} vector\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sum(vector) {\r\n\t        var sum = 0;\r\n\t        for (var i = 0; i < vector.length; i++) {\r\n\t            sum += vector[i];\r\n\t        }\r\n\t        return sum;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Computes the sum of the specified column elements in a two-dimensional array\r\n\t     * @param  {Array.<Array>} dataList  two-dimensional array\r\n\t     * @param  {number} n  the specified column, zero-based\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sumOfColumn(dataList, n) {\r\n\t        var sum = 0;\r\n\t        for (var i = 0; i < dataList.length; i++) {\r\n\t            sum += dataList[i][n];\r\n\t        }\r\n\t        return sum;\r\n\t    }\r\n\r\n\r\n\t    function ascending(a, b) {\r\n\r\n\t        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\r\n\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\r\n\t     * so the return value use to add 1.\r\n\t     * @param  {Array.<number>} array\r\n\t     * @param  {number} value\r\n\t     * @param  {number} start\r\n\t     * @param  {number} end\r\n\t     * @return {number}\r\n\t     */\r\n\t    function bisect(array, value, start, end) { //\u79FB\u51FA\u53BB\r\n\r\n\t        if (start == null) {\r\n\t            start = 0;\r\n\t        }\r\n\t        if (end == null) {\r\n\t            end = array.length;\r\n\t        }\r\n\t        while (start < end) {\r\n\t            var mid = Math.floor((start + end) / 2);\r\n\t            var compare = ascending(array[mid], value);\r\n\t            if (compare > 0) {\r\n\t                end = mid;\r\n\t            }\r\n\t            else if (compare < 0) {\r\n\t                start = mid + 1;\r\n\t            }\r\n\t            else {\r\n\t                return mid + 1;\r\n\t            }\r\n\t        }\r\n\t        return start;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * \u6570\u7EC4\u6620\u5C04\r\n\t     * @memberOf module:zrender/core/util\r\n\t     * @param {Array} obj\r\n\t     * @param {Function} cb\r\n\t     * @param {*} [context]\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function map(obj, cb, context) {\r\n\t        if (!(obj && cb)) {\r\n\t            return;\r\n\t        }\r\n\t        if (obj.map && obj.map === nativeMap) {\r\n\t            return obj.map(cb, context);\r\n\t        }\r\n\t        else {\r\n\t            var result = [];\r\n\t            for (var i = 0, len = obj.length; i < len; i++) {\r\n\t                result.push(cb.call(context, obj[i], i, obj));\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    return {\r\n\t        size: size,\r\n\t        isArray: isArray,\r\n\t        zeros: zeros,\r\n\t        sum: sum,\r\n\t        sumOfColumn: sumOfColumn,\r\n\t        ascending: ascending,\r\n\t        bisect: bisect,\r\n\t        map: map\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    /**\r\n\t     * Test whether value is a number.\r\n\t     * @param  {*}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isNumber(value) {\r\n\r\n\t        value = value === null ? NaN : +value;\r\n\t        return typeof value === 'number' && !isNaN(value);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Test if a number is integer.\r\n\t     * @param  {number}  value\r\n\t     * @return {boolean}\r\n\t     */\r\n\t    function isInteger(value) {\r\n\t        return isFinite(value) && value === Math.round(value);\r\n\t    }\r\n\r\n\t    function quantityExponent(val) {\r\n\t        if (val === 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        var exp = Math.floor(Math.log(val) / Math.LN10);\r\n\t        // Fix pricision loss.\r\n\t        if (val / Math.pow(10, exp) >= 10) {\r\n\t            exp++;\r\n\t        }\r\n\t        return exp;\r\n\t    }\r\n\r\n\t    return {\r\n\t        isNumber: isNumber,\r\n\t        isInteger: isInteger,\r\n\t        quantityExponent: quantityExponent\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\r\n\t    var regreMethods = {\r\n\r\n\t        /**\r\n\t         * Common linear regression algorithm\r\n\t         */\r\n\t        linear: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumX = 0;\r\n\t            var sumY = 0;\r\n\t            var sumXY = 0;\r\n\t            var sumXX = 0;\r\n\t            var len = predata.length;\r\n\r\n\t            for (var i = 0; i < len; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumX += rawItem[xDimIdx];\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumXX += rawItem[xDimIdx] * rawItem[xDimIdx];\r\n\t            }\r\n\r\n\t            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\r\n\t            var intercept = (sumY / len) - ((gradient * sumX) / len);\r\n\r\n\t            var result = [];\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = gradient * rawItem[xDimIdx] + intercept;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient,\r\n\t                    intercept: intercept\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * If the raw data include [0,0] point, we should choose linearThroughOrigin\r\n\t         *   instead of linear.\r\n\t         */\r\n\t        linearThroughOrigin: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumXX = 0;\r\n\t            var sumXY = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumXX += rawItem[xDimIdx] * rawItem[xDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t            }\r\n\r\n\t            var gradient = sumXY / sumXX;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = rawItem[xDimIdx] * gradient;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Exponential regression\r\n\t         */\r\n\t        exponential: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumX = 0;\r\n\t            var sumY = 0;\r\n\t            var sumXXY = 0;\r\n\t            var sumYlny = 0;\r\n\t            var sumXYlny = 0;\r\n\t            var sumXY = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumX += rawItem[xDimIdx];\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumXY += rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumXXY += rawItem[xDimIdx] * rawItem[xDimIdx] * rawItem[yDimIdx];\r\n\t                sumYlny += rawItem[yDimIdx] * Math.log(rawItem[yDimIdx]);\r\n\t                sumXYlny += rawItem[xDimIdx] * rawItem[yDimIdx] * Math.log(rawItem[yDimIdx]);\r\n\t            }\r\n\r\n\t            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\r\n\t            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\r\n\t            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = coefficient * Math.pow(Math.E, index * rawItem[xDimIdx]);\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    coefficient: coefficient,\r\n\t                    index: index\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Logarithmic regression\r\n\t         */\r\n\t        logarithmic: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var sumlnx = 0;\r\n\t            var sumYlnx = 0;\r\n\t            var sumY = 0;\r\n\t            var sumlnxlnx = 0;\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var rawItem = predata[i];\r\n\t                sumlnx += Math.log(rawItem[xDimIdx]);\r\n\t                sumYlnx += rawItem[yDimIdx] * Math.log(rawItem[xDimIdx]);\r\n\t                sumY += rawItem[yDimIdx];\r\n\t                sumlnxlnx += Math.pow(Math.log(rawItem[xDimIdx]), 2);\r\n\t            }\r\n\r\n\t            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\r\n\t            var intercept = (sumY - gradient * sumlnx) / i;\r\n\t            var result = [];\r\n\r\n\t            for (var j = 0; j < predata.length; j++) {\r\n\t                var rawItem = predata[j];\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = gradient * Math.log(rawItem[xDimIdx]) + intercept;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression =\r\n\t                'y = '\r\n\t                + Math.round(intercept * 100) / 100\r\n\t                + ' + '\r\n\t                + Math.round(gradient * 100) / 100 + 'ln(x)';\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: {\r\n\t                    gradient: gradient,\r\n\t                    intercept: intercept\r\n\t                },\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Polynomial regression\r\n\t         */\r\n\t        polynomial: function (predata, opt) {\r\n\r\n\t            var xDimIdx = opt.dimensions[0];\r\n\t            var yDimIdx = opt.dimensions[1];\r\n\t            var order = opt.order;\r\n\r\n\t            if (order == null) {\r\n\t                order = 2;\r\n\t            }\r\n\t            //coefficient matrix\r\n\t            var coeMatrix = [];\r\n\t            var lhs = [];\r\n\t            var k = order + 1;\r\n\r\n\t            for (var i = 0; i < k; i++) {\r\n\t                var sumA = 0;\r\n\t                for (var n = 0; n < predata.length; n++) {\r\n\t                    var rawItem = predata[n];\r\n\t                    sumA += rawItem[yDimIdx] * Math.pow(rawItem[xDimIdx], i);\r\n\t                }\r\n\t                lhs.push(sumA);\r\n\r\n\t                var temp = [];\r\n\t                for (var j = 0; j < k; j++) {\r\n\t                    var sumB = 0;\r\n\t                    for (var m = 0; m < predata.length; m++) {\r\n\t                        sumB += Math.pow(predata[m][xDimIdx], i + j);\r\n\t                    }\r\n\t                    temp.push(sumB);\r\n\t                }\r\n\t                coeMatrix.push(temp);\r\n\t            }\r\n\t            coeMatrix.push(lhs);\r\n\r\n\t            var coeArray = gaussianElimination(coeMatrix, k);\r\n\r\n\t            var result = [];\r\n\r\n\t            for (var i = 0; i < predata.length; i++) {\r\n\t                var value = 0;\r\n\t                var rawItem = predata[i];\r\n\t                for (var n = 0; n < coeArray.length; n++) {\r\n\t                    value += coeArray[n] * Math.pow(rawItem[xDimIdx], n);\r\n\t                }\r\n\t                var resultItem = rawItem.slice();\r\n\t                resultItem[xDimIdx] = rawItem[xDimIdx];\r\n\t                resultItem[yDimIdx] = value;\r\n\t                result.push(resultItem);\r\n\t            }\r\n\r\n\t            var expression = 'y = ';\r\n\t            for (var i = coeArray.length - 1; i >= 0; i--) {\r\n\t                if (i > 1) {\r\n\t                    expression += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\r\n\t                }\r\n\t                else if (i === 1) {\r\n\t                    expression += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\r\n\t                }\r\n\t                else {\r\n\t                    expression += Math.round(coeArray[i] * 100) / 100;\r\n\t                }\r\n\t            }\r\n\r\n\t            return {\r\n\t                points: result,\r\n\t                parameter: coeArray,\r\n\t                expression: expression\r\n\t            };\r\n\r\n\t        }\r\n\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Gaussian elimination\r\n\t     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\r\n\t     * @param  {number} number\r\n\t     * @return {Array}\r\n\t     */\r\n\t    function gaussianElimination(matrix, number) {\r\n\r\n\t        for (var i = 0; i < matrix.length - 1; i++) {\r\n\t            var maxColumn = i;\r\n\t            for (var j = i + 1; j < matrix.length - 1; j++) {\r\n\t                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\r\n\t                    maxColumn = j;\r\n\t                }\r\n\t            }\r\n\t            // the matrix here is the transpose of the common Augmented matrix.\r\n\t            //  so the can perform the primary column transform, in fact, equivalent\r\n\t            //  to the primary line changes\r\n\t            for (var k = i; k < matrix.length; k++) {\r\n\t                var temp = matrix[k][i];\r\n\t                matrix[k][i] = matrix[k][maxColumn];\r\n\t                matrix[k][maxColumn] = temp;\r\n\t            }\r\n\t            for (var n = i + 1; n < matrix.length - 1; n++) {\r\n\t                for (var m = matrix.length - 1; m >= i; m--) {\r\n\t                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        var data = new Array(number);\r\n\t        var len = matrix.length - 1;\r\n\t        for (var j = matrix.length - 2; j >= 0; j--) {\r\n\t            var temp = 0;\r\n\t            for (var i = j + 1; i < matrix.length - 1; i++) {\r\n\t                temp += matrix[i][j] * data[i];\r\n\t            }\r\n\t            data[j] = (matrix[len][j] - temp) / matrix[j][j];\r\n\r\n\t        }\r\n\r\n\t        return data;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param  {string} regreMethod\r\n\t     * @param  {Array.<Array.<number>>} data   two-dimensional number array\r\n\t     * @param  {Object|number} [optOrOrder]  opt or order\r\n\t     * @param  {number} [optOrOrder.order]  order of polynomials\r\n\t     * @param  {Array.<number>|number} [optOrOrder.dimensions=[0, 1]]  Target dimensions to calculate the regression.\r\n\t     *         By defualt: use [0, 1] as [x, y].\r\n\t     * @return {Array}\r\n\t     */\r\n\t    var regression = function (regreMethod, data, optOrOrder) {\r\n\t        var opt = typeof optOrOrder === 'number'\r\n\t            ? { order: optOrOrder }\r\n\t            : (optOrOrder || {});\r\n\r\n\t        var dimensions = normalizeDimensions(opt.dimensions, [0, 1]);\r\n\r\n\t        var predata = dataPreprocess(data, { dimensions: dimensions });\r\n\t        var result = regreMethods[regreMethod](predata, {\r\n\t            order: opt.order,\r\n\t            dimensions: dimensions\r\n\t        });\r\n\r\n\t        // Sort for line chart.\r\n\t        var xDimIdx = dimensions[0];\r\n\t        result.points.sort(function (itemA, itemB) {\r\n\t            return itemA[xDimIdx] - itemB[xDimIdx];\r\n\t        });\r\n\r\n\t        return result;\r\n\t    };\r\n\r\n\t    return regression;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var statistics = {};\r\n\r\n\t    statistics.max = __webpack_require__(7);\r\n\t    statistics.deviation = __webpack_require__(8);\r\n\t    statistics.mean = __webpack_require__(10);\r\n\t    statistics.median = __webpack_require__(12);\r\n\t    statistics.min = __webpack_require__(14);\r\n\t    statistics.quantile = __webpack_require__(13);\r\n\t    statistics.sampleVariance = __webpack_require__(9);\r\n\t    statistics.sum = __webpack_require__(11);\r\n\r\n\t    return statistics;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the max value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function max(data) {\r\n\r\n\t        var maxData = -Infinity;\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            if (isNumber(data[i]) && data[i] > maxData) {\r\n\t                maxData = data[i];\r\n\t            }\r\n\t        }\r\n\t        return maxData;\r\n\t    }\r\n\r\n\t    return max;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var variance = __webpack_require__(9);\r\n\r\n\t    /**\r\n\t     * Computing the deviation\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    return function (data) {\r\n\r\n\t        var squaredDeviation = variance(data);\r\n\r\n\t        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\r\n\t    };\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\t    var mean = __webpack_require__(10);\r\n\r\n\t    /**\r\n\t     * Computing the variance of list of sample\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sampleVariance(data) {\r\n\r\n\t        var len = data.length;\r\n\t        if (!len || len < 2) {\r\n\t            return 0;\r\n\t        }\r\n\t        if (data.length >= 2) {\r\n\r\n\t            var meanValue = mean(data);\r\n\t            var sum = 0;\r\n\t            var temple;\r\n\r\n\t            for (var i = 0; i < data.length; i++) {\r\n\t                if (isNumber(data[i])) {\r\n\t                    temple = data[i] - meanValue;\r\n\t                    sum += temple * temple;\r\n\t                }\r\n\t            }\r\n\t            return sum / (data.length - 1);\r\n\t        }\r\n\t    }\r\n\r\n\t    return sampleVariance;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var sum = __webpack_require__(11);\r\n\r\n\t    /**\r\n\t     * Is a method for computing the mean value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function mean(data) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\r\n\t        return sum(data) / data.length;\r\n\r\n\t    }\r\n\r\n\t    return mean;\r\n\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the sum of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function sum(data) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\t        var sumData = 0;\r\n\t        for (var i = 0; i < len; i++) {\r\n\t            if (isNumber(data[i])) {\r\n\t                sumData += data[i];\r\n\t            }\r\n\t        }\r\n\t        return sumData;\r\n\t    }\r\n\r\n\t    return sum;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var quantile = __webpack_require__(13);\r\n\r\n\t    /**\r\n\t     * Is a method for computing the median value of a sorted array of numbers\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function median(data) {\r\n\r\n\t        return quantile(data, 0.5);\r\n\t    }\r\n\r\n\t    return median;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    /**\r\n\t     * Estimating quantiles from a sorted sample of numbers\r\n\t     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\r\n\t     * R-7 method\r\n\t     * @param  {Array.<number>} data  sorted array\r\n\t     * @param  {number} p\r\n\t     */\r\n\t    return function (data, p) {\r\n\r\n\t        var len = data.length;\r\n\r\n\t        if (!len) {\r\n\t            return 0;\r\n\t        }\r\n\t        if (p <= 0 || len < 2) {\r\n\t            return data[0];\r\n\t        }\r\n\t        if (p >= 1) {\r\n\t            return data[len -1];\r\n\t        }\r\n\t        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\r\n\t        var h = (len - 1) * p;\r\n\t        var i = Math.floor(h);\r\n\t        var a = data[i];\r\n\t        var b = data[i + 1];\r\n\t        return a + (b - a) * (h - i);\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var number = __webpack_require__(4);\r\n\t    var isNumber = number.isNumber;\r\n\r\n\t    /**\r\n\t     * Is a method for computing the min value of a list of numbers,\r\n\t     * which will filter other data types.\r\n\t     * @param  {Array.<number>} data\r\n\t     * @return {number}\r\n\t     */\r\n\t    function min(data) {\r\n\r\n\t        var minData = Infinity;\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            if (isNumber(data[i]) && data[i] < minData) {\r\n\t                minData = data[i];\r\n\t            }\r\n\t        }\r\n\t        return minData;\r\n\t    }\r\n\r\n\t    return min;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var max = __webpack_require__(7);\r\n\t    var min = __webpack_require__(14);\r\n\t    var quantile = __webpack_require__(13);\r\n\t    var deviation = __webpack_require__(8);\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var dataPreprocess = dataProcess.dataPreprocess;\r\n\t    var normalizeDimensions = dataProcess.normalizeDimensions;\r\n\t    var array = __webpack_require__(3);\r\n\t    var ascending = array.ascending;\r\n\t    var map = array.map;\r\n\t    var range = __webpack_require__(16);\r\n\t    var bisect = array.bisect;\r\n\t    var tickStep = __webpack_require__(17);\r\n\r\n\t    /**\r\n\t     * Compute bins for histogram\r\n\t     * @param  {Array.<number>} data\r\n\t     * @param  {Object|string} optOrMethod Optional settings or `method`.\r\n\t     * @param  {Object|string} optOrMethod.method 'squareRoot' | 'scott' | 'freedmanDiaconis' | 'sturges'\r\n\t     * @param  {Array.<number>|number} optOrMethod.dimensions If data is a 2-d array,\r\n\t     *         which dimension will be used to calculate histogram.\r\n\t     * @return {Object}\r\n\t     */\r\n\t    function computeBins(data, optOrMethod) {\r\n\t        var opt = typeof optOrMethod === 'string'\r\n\t            ? { method: optOrMethod }\r\n\t            : (optOrMethod || {});\r\n\r\n\t        var threshold = opt.method == null\r\n\t            ? thresholdMethod.squareRoot\r\n\t            : thresholdMethod[opt.method];\r\n\t        var dimensions = normalizeDimensions(opt.dimensions);\r\n\r\n\t        var values = dataPreprocess(data, {\r\n\t            dimensions: dimensions,\r\n\t            toOneDimensionArray: true\r\n\t        });\r\n\t        var maxValue = max(values);\r\n\t        var minValue = min(values);\r\n\t        var binsNumber = threshold(values, minValue, maxValue);\r\n\t        var tickStepResult = tickStep(minValue, maxValue, binsNumber);\r\n\t        var step = tickStepResult.step;\r\n\t        var toFixedPrecision = tickStepResult.toFixedPrecision;\r\n\r\n\t        // return the xAxis coordinate for each bins, except the end point of the value\r\n\t        var rangeArray = range(\r\n\t            // use function toFixed() to avoid data like '0.700000001'\r\n\t            +((Math.ceil(minValue / step) * step).toFixed(toFixedPrecision)),\r\n\t            +((Math.floor(maxValue / step) * step).toFixed(toFixedPrecision)),\r\n\t            step,\r\n\t            toFixedPrecision\r\n\t        );\r\n\r\n\t        var len = rangeArray.length;\r\n\r\n\t        var bins = new Array(len + 1);\r\n\r\n\t        for (var i = 0; i <= len; i++) {\r\n\t            bins[i] = {};\r\n\t            bins[i].sample = [];\r\n\t            bins[i].x0 = i > 0\r\n\t                ? rangeArray[i - 1]\r\n\t                : (rangeArray[i] - minValue) === step\r\n\t                ? minValue\r\n\t                : (rangeArray[i] - step);\r\n\t            bins[i].x1 = i < len\r\n\t                ? rangeArray[i]\r\n\t                : (maxValue - rangeArray[i-1]) === step\r\n\t                ? maxValue\r\n\t                : rangeArray[i - 1] + step;\r\n\t        }\r\n\r\n\t        for (var i = 0; i < values.length; i++) {\r\n\t            if (minValue <= values[i] && values[i] <= maxValue) {\r\n\t                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\r\n\t            }\r\n\t        }\r\n\r\n\t        var data = map(bins, function (bin) {\r\n\t            // use function toFixed() to avoid data like '6.5666638489'\r\n\t            return [\r\n\t                +((bin.x0 + bin.x1) / 2).toFixed(toFixedPrecision),\r\n\t                bin.sample.length,\r\n\t                bin.x0,\r\n\t                bin.x1,\r\n\t                bin.x0 + ' - ' + bin.x1\r\n\t            ];\r\n\t        });\r\n\r\n\t        var customData = map(bins, function (bin) {\r\n\t            return [bin.x0, bin.x1, bin.sample.length];\r\n\t        });\r\n\r\n\t        return {\r\n\t            bins: bins,\r\n\t            data: data,\r\n\t            customData: customData\r\n\t        };\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Four kinds of threshold methods used to\r\n\t     * compute how much bins the histogram should be divided\r\n\t     * @see  https://en.wikipedia.org/wiki/Histogram\r\n\t     * @type {Object}\r\n\t     */\r\n\t    var thresholdMethod = {\r\n\r\n\t        squareRoot: function (data) {\r\n\r\n\t            var bins = Math.ceil(Math.sqrt(data.length));\r\n\r\n\t            return bins > 50 ? 50 : bins;\r\n\t        },\r\n\r\n\t        scott: function (data, min, max) {\r\n\r\n\t            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\r\n\t        },\r\n\r\n\t        freedmanDiaconis: function (data, min, max) {\r\n\r\n\t            data.sort(ascending);\r\n\r\n\t            return Math.ceil(\r\n\t                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\r\n\t            );\r\n\t        },\r\n\r\n\t        sturges: function (data) {\r\n\r\n\t            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\r\n\r\n\t        }\r\n\t    };\r\n\r\n\t    return computeBins;\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var dataProcess = __webpack_require__(2);\r\n\t    var getPrecision = dataProcess.getPrecision;\r\n\r\n\t    /**\r\n\t     * Computing range array.\r\n\t     * Adding param precision to fix range value, avoiding range[i] = 0.7000000001.\r\n\t     * @param  {number} start\r\n\t     * @param  {number} end\r\n\t     * @param  {number} step\r\n\t     * @param  {number} precision\r\n\t     * @return {Array.<number>}\r\n\t     */\r\n\t    return function (start, end, step, precision) {\r\n\r\n\t        var len = arguments.length;\r\n\r\n\t        if (len < 2) {\r\n\t            end = start;\r\n\t            start = 0;\r\n\t            step = 1;\r\n\t        }\r\n\t        else if (len < 3) {\r\n\t            step = 1;\r\n\t        }\r\n\t        else if (len < 4) {\r\n\t            step = +step;\r\n\t            precision = getPrecision(step);\r\n\t        }\r\n\t        else {\r\n\t            precision = +precision;\r\n\t        }\r\n\r\n\t        var n = Math.ceil(((end - start) / step).toFixed(precision));\r\n\t        var range = new Array(n + 1);\r\n\t        for (var i = 0; i < n + 1; i++) {\r\n\t            range[i] = +(start + i * step).toFixed(precision);\r\n\t        }\r\n\t        return range;\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var numberUtil = __webpack_require__(4);\r\n\r\n\t    /**\r\n\t     * Computing the length of step\r\n\t     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\r\n\t     * @param {number} start\r\n\t     * @param {number} stop\r\n\t     * @param {number} count\r\n\t     */\r\n\t    return function (start, stop, count) {\r\n\r\n\t        var step0 = Math.abs(stop - start) / count;\r\n\t        var precision = numberUtil.quantityExponent(step0);\r\n\r\n\t        var step1 = Math.pow(10, precision);\r\n\t        var error = step0 / step1;\r\n\r\n\t        if (error >= Math.sqrt(50)) {\r\n\t            step1 *= 10;\r\n\t        }\r\n\t        else if (error >= Math.sqrt(10)) {\r\n\t            step1 *= 5;\r\n\t        }\r\n\t        else if(error >= Math.sqrt(2)) {\r\n\t            step1 *= 2;\r\n\t        }\r\n\r\n\t        var toFixedPrecision = precision < 0 ? -precision : 0;\r\n\t        var resultStep = +(\r\n\t            (stop >= start ? step1 : -step1).toFixed(toFixedPrecision)\r\n\t        );\r\n\r\n\t        return {\r\n\t            step: resultStep,\r\n\t            toFixedPrecision: toFixedPrecision\r\n\t        };\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var regression = __webpack_require__(5);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\t    var FORMULA_DIMENSION = 2;\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:regression',\r\n\r\n\t        /**\r\n\t         * @param {Paramter<typeof regression>[0]} [params.config.method='linear'] 'linear' by default\r\n\t         * @param {Paramter<typeof regression>[2]} [params.config.order=2] Only work when method is `polynomial`.\r\n\t         * @param {DimensionLoose[]|DimensionLoose} [params.config.dimensions=[0, 1]] dimensions that used to calculate regression.\r\n\t         *        By default [0, 1].\r\n\t         * @param {'start' | 'end' | 'all'} params.config.formulaOn Include formula on the last (third) dimension of the:\r\n\t         *        'start': first data item.\r\n\t         *        'end': last data item (by default).\r\n\t         *        'all': all data items.\r\n\t         *        'none': no data item.\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\t            var method = config.method || 'linear';\r\n\r\n\t            var result = regression(method, upstream.cloneRawData(), {\r\n\t                order: config.order,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions)\r\n\t            });\r\n\t            var points = result.points;\r\n\r\n\t            var formulaOn = config.formulaOn;\r\n\t            if (formulaOn == null) {\r\n\t                formulaOn = 'end';\r\n\t            }\r\n\r\n\t            var dimensions;\r\n\t            if (formulaOn !== 'none') {\r\n\t                for (var i = 0; i < points.length; i++) {\r\n\t                    points[i][FORMULA_DIMENSION] =\r\n\t                    (\r\n\t                        (formulaOn === 'start' && i === 0)\r\n\t                        || (formulaOn === 'all')\r\n\t                        || (formulaOn === 'end' && i === points.length - 1)\r\n\t                    ) ? result.expression : '';\r\n\t                }\r\n\t                dimensions = upstream.cloneAllDimensionInfo();\r\n\t                dimensions[FORMULA_DIMENSION] = {};\r\n\t            }\r\n\r\n\t            return [{\r\n\t                dimensions: dimensions,\r\n\t                data: points\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var arrayUtil = __webpack_require__(3);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var objectUtil = __webpack_require__(20);\r\n\r\n\t    /**\r\n\t     * type DimensionLoose = DimensionIndex | DimensionName;\r\n\t     * type DimensionIndex = number;\r\n\t     * type DimensionName = string;\r\n\t     *\r\n\t     * @param {object} transformParams The parameter of echarts transfrom.\r\n\t     * @param {DimensionLoose | DimensionLoose[]} dimensionsConfig\r\n\t     * @return {DimensionIndex | DimensionIndex[]}\r\n\t     */\r\n\t    function normalizeExistingDimensions(transformParams, dimensionsConfig) {\r\n\t        if (dimensionsConfig == null) {\r\n\t            return;\r\n\t        }\r\n\t        var upstream = transformParams.upstream;\r\n\r\n\t        if (arrayUtil.isArray(dimensionsConfig)) {\r\n\t            var result = [];\r\n\t            for (var i = 0; i < dimensionsConfig.length; i++) {\r\n\t                var dimInfo = upstream.getDimensionInfo(dimensionsConfig[i]);\r\n\t                validateDimensionExists(dimInfo, dimensionsConfig[i]);\r\n\t                result[i] = dimInfo.index;\r\n\t            }\r\n\t            return result;\r\n\t        }\r\n\t        else {\r\n\t            var dimInfo = upstream.getDimensionInfo(dimensionsConfig);\r\n\t            validateDimensionExists(dimInfo, dimensionsConfig);\r\n\t            return dimInfo.index;\r\n\t        }\r\n\r\n\t        function validateDimensionExists(dimInfo, dimConfig) {\r\n\t            if (!dimInfo) {\r\n\t                throw new Error('Can not find dimension by ' + dimConfig);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    /**\r\n\t     * @param {object} transformParams The parameter of echarts transfrom.\r\n\t     * @param {(DimensionIndex | {name: DimensionName, index: DimensionIndex})[]} dimensionsConfig\r\n\t     * @param {{name: DimensionName | DimensionName[], index: DimensionIndex | DimensionIndex[]}}\r\n\t     */\r\n\t    function normalizeNewDimensions(dimensionsConfig) {\r\n\t        if (arrayUtil.isArray(dimensionsConfig)) {\r\n\t            var names = [];\r\n\t            var indices = [];\r\n\t            for (var i = 0; i < dimensionsConfig.length; i++) {\r\n\t                var item = parseDimensionNewItem(dimensionsConfig[i]);\r\n\t                names.push(item.name);\r\n\t                indices.push(item.index);\r\n\t            }\r\n\t            return {name: names, index: indices};\r\n\t        }\r\n\t        else if (dimensionsConfig != null) {\r\n\t            return parseDimensionNewItem(dimensionsConfig);\r\n\t        }\r\n\r\n\t        function parseDimensionNewItem(dimConfig) {\r\n\t            if (numberUtil.isNumber(dimConfig)) {\r\n\t                return { index: dimConfig };\r\n\t            }\r\n\t            else if (objectUtil.isObject(dimConfig) && numberUtil.isNumber(dimConfig.index)) {\r\n\t                return dimConfig;\r\n\t            }\r\n\t            throw new Error('Illegle new dimensions config. Expect `{ name: string, index: number }`.');\r\n\t        }\r\n\t    }\r\n\r\n\t    return {\r\n\t        normalizeExistingDimensions: normalizeExistingDimensions,\r\n\t        normalizeNewDimensions: normalizeNewDimensions\r\n\t    };\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    function extend(target, source) {\r\n\t        if (Object.assign) {\r\n\t            Object.assign(target, source);\r\n\t        }\r\n\t        else {\r\n\t            for (var key in source) {\r\n\t                if (source.hasOwnProperty(key)) {\r\n\t                    target[key] = source[key];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        return target;\r\n\t    }\r\n\r\n\t    function isObject(value) {\r\n\t        const type = typeof value;\r\n\t        return type === 'function' || (!!value && type === 'object');\r\n\t    }\r\n\r\n\t    return {\r\n\t        extend: extend,\r\n\t        isObject: isObject\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var histogram = __webpack_require__(15);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:histogram',\r\n\r\n\t        /**\r\n\t         * @param {'squareRoot' | 'scott' | 'freedmanDiaconis' | 'sturges'} [params.config.method='squareRoot']\r\n\t         * @param {DimnensionLoose[]} [params.config.dimensions=[0, 1]] dimensions that used to calculate histogram.\r\n\t         *        By default [0].\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\r\n\t            var result = histogram(upstream.cloneRawData(), {\r\n\t                method: config.method,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions)\r\n\t            });\r\n\r\n\t            return [{\r\n\t                dimensions: ['MeanOfV0V1', 'VCount', 'V0', 'V1', 'DisplayableName'],\r\n\t                data: result.data\r\n\t            }, {\r\n\t                data: result.customData\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\r\n\r\n\t    var clustering = __webpack_require__(1);\r\n\t    var numberUtil = __webpack_require__(4);\r\n\t    var transformHelper = __webpack_require__(19);\r\n\r\n\t    var isNumber = numberUtil.isNumber;\r\n\r\n\t    return {\r\n\r\n\t        type: 'ecStat:clustering',\r\n\r\n\t        /**\r\n\t         * @param {number} params.config.clusterCount Mandatory.\r\n\t         *        The number of clusters in a dataset. It has to be greater than 1.\r\n\t         * @param {(DimensionName | DimensionIndex)[]} [params.config.dimensions] Optional.\r\n\t         *        Target dimensions to calculate the regression.\r\n\t         *        By default: use all of the data.\r\n\t         * @param {(DimensionIndex | {name?: DimensionName, index: DimensionIndex})} [params.config.outputClusterIndexDimension] Mandatory.\r\n\t         * @param {(DimensionIndex | {name?: DimensionName, index: DimensionIndex})[]} [params.config.outputCentroidDimensions] Optional.\r\n\t         *        If specified, the centroid will be set to those dimensions of the result data one by one.\r\n\t         *        By default not set centroid to result.\r\n\t         */\r\n\t        transform: function transform(params) {\r\n\t            var upstream = params.upstream;\r\n\t            var config = params.config || {};\r\n\t            var clusterCount = config.clusterCount;\r\n\r\n\t            if (!isNumber(clusterCount) || clusterCount <= 0) {\r\n\t                throw new Error('config param \"clusterCount\" need to be specified as an interger greater than 1.');\r\n\t            }\r\n\r\n\t            if (clusterCount === 1) {\r\n\t                return [{\r\n\t                }, {\r\n\t                    data: []\r\n\t                }];\r\n\t            }\r\n\r\n\t            var outputClusterIndexDimension = transformHelper.normalizeNewDimensions(\r\n\t                config.outputClusterIndexDimension\r\n\t            );\r\n\t            var outputCentroidDimensions = transformHelper.normalizeNewDimensions(\r\n\t                config.outputCentroidDimensions\r\n\t            );\r\n\r\n\t            if (outputClusterIndexDimension == null) {\r\n\t                throw new Error('outputClusterIndexDimension is required as a number.');\r\n\t            }\r\n\r\n\t            var result = clustering.hierarchicalKMeans(upstream.cloneRawData(), {\r\n\t                clusterCount: clusterCount,\r\n\t                stepByStep: false,\r\n\t                dimensions: transformHelper.normalizeExistingDimensions(params, config.dimensions),\r\n\t                outputType: clustering.OutputType.SINGLE,\r\n\t                outputClusterIndexDimension: outputClusterIndexDimension.index,\r\n\t                outputCentroidDimensions: (outputCentroidDimensions || {}).index\r\n\t            });\r\n\r\n\t            var sourceDimAll = upstream.cloneAllDimensionInfo();\r\n\t            var resultDimsDef = [];\r\n\t            for (var i = 0; i < sourceDimAll.length; i++) {\r\n\t                var sourceDimItem = sourceDimAll[i];\r\n\t                resultDimsDef.push(sourceDimItem.name);\r\n\t            }\r\n\r\n\t            // Always set to dims def even if name not exists, because the resultDimsDef.length\r\n\t            // need to be enlarged to tell echarts that there is \"cluster index dimension\" and \"dist dimension\".\r\n\t            resultDimsDef[outputClusterIndexDimension.index] = outputClusterIndexDimension.name;\r\n\r\n\t            if (outputCentroidDimensions) {\r\n\t                for (var i = 0; i < outputCentroidDimensions.index.length; i++) {\r\n\t                    if (outputCentroidDimensions.name[i] != null) {\r\n\t                        resultDimsDef[outputCentroidDimensions.index[i]] = outputCentroidDimensions.name[i];\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\r\n\t            return [{\r\n\t                dimensions: resultDimsDef,\r\n\t                data: result.data\r\n\t            }, {\r\n\t                data: result.centroids\r\n\t            }];\r\n\t        }\r\n\t    };\r\n\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n\r\n/***/ })\r\n/******/ ])\r\n});\r\n;", "module.exports = require('./dist/ecStat.js');\r\n", "export default require(\"./node_modules/echarts-stat/index.js\");"],
  "mappings": "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",
  "names": []
}
